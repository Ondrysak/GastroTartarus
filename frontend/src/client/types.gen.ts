// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
  grant_type?: string | null
  username: string
  password: string
  scope?: string
  client_id?: string | null
  client_secret?: string | null
}

export type HTTPValidationError = {
  detail?: Array<ValidationError>
}

export type IngredientCreate = {
  name: string
  category?: string | null
  unit?: string
}

export type IngredientPublic = {
  name: string
  category?: string | null
  unit?: string
  id: string
}

export type IngredientsPublic = {
  data: Array<IngredientPublic>
  count: number
}

export type IngredientUpdate = {
  name?: string | null
  category?: string | null
  unit?: string | null
}

export type ItemCreate = {
  title: string
  description?: string | null
}

export type ItemPublic = {
  title: string
  description?: string | null
  id: string
  owner_id: string
}

export type ItemsPublic = {
  data: Array<ItemPublic>
  count: number
}

export type ItemUpdate = {
  title?: string | null
  description?: string | null
}

export type Message = {
  message: string
}

export type NewPassword = {
  token: string
  new_password: string
}

export type PrivateUserCreate = {
  email: string
  password: string
  full_name: string
  is_verified?: boolean
}

export type RecipeCreate = {
  name: string
  description?: string | null
  instructions?: string | null
  prep_time_minutes?: number | null
  cook_time_minutes?: number | null
  servings?: number | null
  difficulty?: string | null
  cuisine?: string | null
}

export type RecipeIngredientCreate = {
  amount: number | string
  notes?: string | null
  recipe_id: string
  ingredient_id: string
}

export type RecipeIngredientPublic = {
  amount: string
  notes?: string | null
  id: string
  recipe_id: string
  ingredient_id: string
  ingredient?: IngredientPublic | null
}

export type RecipeIngredientsPublic = {
  data: Array<RecipeIngredientPublic>
  count: number
}

export type RecipeIngredientUpdate = {
  amount?: number | string | null
  notes?: string | null
  recipe_id?: string | null
  ingredient_id?: string | null
}

export type RecipePublic = {
  name: string
  description?: string | null
  instructions?: string | null
  prep_time_minutes?: number | null
  cook_time_minutes?: number | null
  servings?: number | null
  difficulty?: string | null
  cuisine?: string | null
  id: string
  owner_id: string
}

export type RecipesPublic = {
  data: Array<RecipePublic>
  count: number
}

export type RecipeSuggestion = {
  recipe: RecipeWithIngredients
  match_score: number
  available_ingredients?: Array<RecipeIngredientPublic>
  missing_ingredients?: Array<RecipeIngredientPublic>
  total_ingredients: number
  available_count: number
}

export type RecipeSuggestionsPublic = {
  data: Array<RecipeSuggestion>
  count: number
}

export type RecipeUpdate = {
  name?: string | null
  description?: string | null
  instructions?: string | null
  prep_time_minutes?: number | null
  cook_time_minutes?: number | null
  servings?: number | null
  difficulty?: string | null
  cuisine?: string | null
}

export type RecipeWithIngredients = {
  name: string
  description?: string | null
  instructions?: string | null
  prep_time_minutes?: number | null
  cook_time_minutes?: number | null
  servings?: number | null
  difficulty?: string | null
  cuisine?: string | null
  id: string
  owner_id: string
  recipe_ingredients?: Array<RecipeIngredientPublic>
}

export type Token = {
  access_token: string
  token_type?: string
}

export type UpdatePassword = {
  current_password: string
  new_password: string
}

export type UserCreate = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  password: string
}

export type UserIngredientCreate = {
  amount: number | string
  expiration_date?: string | null
  notes?: string | null
  ingredient_id: string
}

export type UserIngredientPublic = {
  amount: string
  expiration_date?: string | null
  notes?: string | null
  id: string
  user_id: string
  ingredient_id: string
  ingredient?: IngredientPublic | null
}

export type UserIngredientsPublic = {
  data: Array<UserIngredientPublic>
  count: number
}

export type UserIngredientUpdate = {
  amount?: number | string | null
  expiration_date?: string | null
  notes?: string | null
  ingredient_id?: string | null
}

export type UserPublic = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  id: string
}

export type UserRegister = {
  email: string
  password: string
  full_name?: string | null
}

export type UsersPublic = {
  data: Array<UserPublic>
  count: number
}

export type UserUpdate = {
  email?: string | null
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  password?: string | null
}

export type UserUpdateMe = {
  full_name?: string | null
  email?: string | null
}

export type ValidationError = {
  loc: Array<string | number>
  msg: string
  type: string
}

export type IngredientsReadIngredientsData = {
  limit?: number
  search?: string | null
  skip?: number
}

export type IngredientsReadIngredientsResponse = IngredientsPublic

export type IngredientsCreateIngredientData = {
  requestBody: IngredientCreate
}

export type IngredientsCreateIngredientResponse = IngredientPublic

export type IngredientsReadIngredientData = {
  id: string
}

export type IngredientsReadIngredientResponse = IngredientPublic

export type IngredientsUpdateIngredientData = {
  id: string
  requestBody: IngredientUpdate
}

export type IngredientsUpdateIngredientResponse = IngredientPublic

export type IngredientsDeleteIngredientData = {
  id: string
}

export type IngredientsDeleteIngredientResponse = Message

export type ItemsReadItemsData = {
  limit?: number
  skip?: number
}

export type ItemsReadItemsResponse = ItemsPublic

export type ItemsCreateItemData = {
  requestBody: ItemCreate
}

export type ItemsCreateItemResponse = ItemPublic

export type ItemsReadItemData = {
  id: string
}

export type ItemsReadItemResponse = ItemPublic

export type ItemsUpdateItemData = {
  id: string
  requestBody: ItemUpdate
}

export type ItemsUpdateItemResponse = ItemPublic

export type ItemsDeleteItemData = {
  id: string
}

export type ItemsDeleteItemResponse = Message

export type LoginLoginAccessTokenData = {
  formData: Body_login_login_access_token
}

export type LoginLoginAccessTokenResponse = Token

export type LoginTestTokenResponse = UserPublic

export type LoginRecoverPasswordData = {
  email: string
}

export type LoginRecoverPasswordResponse = Message

export type LoginResetPasswordData = {
  requestBody: NewPassword
}

export type LoginResetPasswordResponse = Message

export type LoginRecoverPasswordHtmlContentData = {
  email: string
}

export type LoginRecoverPasswordHtmlContentResponse = string

export type PrivateCreateUserData = {
  requestBody: PrivateUserCreate
}

export type PrivateCreateUserResponse = UserPublic

export type RecipeIngredientsReadRecipeIngredientsData = {
  limit?: number
  /**
   * Recipe ID to get ingredients for
   */
  recipeId: string
  skip?: number
}

export type RecipeIngredientsReadRecipeIngredientsResponse =
  RecipeIngredientsPublic

export type RecipeIngredientsCreateRecipeIngredientData = {
  requestBody: RecipeIngredientCreate
}

export type RecipeIngredientsCreateRecipeIngredientResponse =
  RecipeIngredientPublic

export type RecipeIngredientsReadRecipeIngredientData = {
  id: string
}

export type RecipeIngredientsReadRecipeIngredientResponse =
  RecipeIngredientPublic

export type RecipeIngredientsUpdateRecipeIngredientData = {
  id: string
  requestBody: RecipeIngredientUpdate
}

export type RecipeIngredientsUpdateRecipeIngredientResponse =
  RecipeIngredientPublic

export type RecipeIngredientsDeleteRecipeIngredientData = {
  id: string
}

export type RecipeIngredientsDeleteRecipeIngredientResponse = Message

export type RecipesReadRecipesData = {
  limit?: number
  search?: string | null
  skip?: number
}

export type RecipesReadRecipesResponse = RecipesPublic

export type RecipesCreateRecipeData = {
  requestBody: RecipeCreate
}

export type RecipesCreateRecipeResponse = RecipePublic

export type RecipesGetRecipeSuggestionsData = {
  limit?: number
  minMatchScore?: number
}

export type RecipesGetRecipeSuggestionsResponse = RecipeSuggestionsPublic

export type RecipesReadRecipeData = {
  id: string
}

export type RecipesReadRecipeResponse = RecipePublic

export type RecipesUpdateRecipeData = {
  id: string
  requestBody: RecipeUpdate
}

export type RecipesUpdateRecipeResponse = RecipePublic

export type RecipesDeleteRecipeData = {
  id: string
}

export type RecipesDeleteRecipeResponse = Message

export type UserIngredientsReadUserIngredientsData = {
  daysAhead?: number
  expiringSoon?: boolean
  limit?: number
  skip?: number
}

export type UserIngredientsReadUserIngredientsResponse = UserIngredientsPublic

export type UserIngredientsCreateUserIngredientData = {
  requestBody: UserIngredientCreate
}

export type UserIngredientsCreateUserIngredientResponse = UserIngredientPublic

export type UserIngredientsReadUserIngredientData = {
  id: string
}

export type UserIngredientsReadUserIngredientResponse = UserIngredientPublic

export type UserIngredientsUpdateUserIngredientData = {
  id: string
  requestBody: UserIngredientUpdate
}

export type UserIngredientsUpdateUserIngredientResponse = UserIngredientPublic

export type UserIngredientsDeleteUserIngredientData = {
  id: string
}

export type UserIngredientsDeleteUserIngredientResponse = Message

export type UsersReadUsersData = {
  limit?: number
  skip?: number
}

export type UsersReadUsersResponse = UsersPublic

export type UsersCreateUserData = {
  requestBody: UserCreate
}

export type UsersCreateUserResponse = UserPublic

export type UsersReadUserMeResponse = UserPublic

export type UsersDeleteUserMeResponse = Message

export type UsersUpdateUserMeData = {
  requestBody: UserUpdateMe
}

export type UsersUpdateUserMeResponse = UserPublic

export type UsersUpdatePasswordMeData = {
  requestBody: UpdatePassword
}

export type UsersUpdatePasswordMeResponse = Message

export type UsersRegisterUserData = {
  requestBody: UserRegister
}

export type UsersRegisterUserResponse = UserPublic

export type UsersReadUserByIdData = {
  userId: string
}

export type UsersReadUserByIdResponse = UserPublic

export type UsersUpdateUserData = {
  requestBody: UserUpdate
  userId: string
}

export type UsersUpdateUserResponse = UserPublic

export type UsersDeleteUserData = {
  userId: string
}

export type UsersDeleteUserResponse = Message

export type UtilsTestEmailData = {
  emailTo: string
}

export type UtilsTestEmailResponse = Message

export type UtilsHealthCheckResponse = boolean
