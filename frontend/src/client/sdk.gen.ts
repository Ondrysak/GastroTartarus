// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  IngredientsCreateIngredientData,
  IngredientsCreateIngredientResponse,
  IngredientsDeleteIngredientData,
  IngredientsDeleteIngredientResponse,
  IngredientsReadIngredientData,
  IngredientsReadIngredientResponse,
  IngredientsReadIngredientsData,
  IngredientsReadIngredientsResponse,
  IngredientsUpdateIngredientData,
  IngredientsUpdateIngredientResponse,
  ItemsCreateItemData,
  ItemsCreateItemResponse,
  ItemsDeleteItemData,
  ItemsDeleteItemResponse,
  ItemsReadItemData,
  ItemsReadItemResponse,
  ItemsReadItemsData,
  ItemsReadItemsResponse,
  ItemsUpdateItemData,
  ItemsUpdateItemResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginTestTokenResponse,
  PrivateCreateUserData,
  PrivateCreateUserResponse,
  RecipeIngredientsCreateRecipeIngredientData,
  RecipeIngredientsCreateRecipeIngredientResponse,
  RecipeIngredientsDeleteRecipeIngredientData,
  RecipeIngredientsDeleteRecipeIngredientResponse,
  RecipeIngredientsReadRecipeIngredientData,
  RecipeIngredientsReadRecipeIngredientResponse,
  RecipeIngredientsReadRecipeIngredientsData,
  RecipeIngredientsReadRecipeIngredientsResponse,
  RecipeIngredientsUpdateRecipeIngredientData,
  RecipeIngredientsUpdateRecipeIngredientResponse,
  RecipesCreateRecipeData,
  RecipesCreateRecipeResponse,
  RecipesDeleteRecipeData,
  RecipesDeleteRecipeResponse,
  RecipesGetRecipeSuggestionsData,
  RecipesGetRecipeSuggestionsResponse,
  RecipesReadRecipeData,
  RecipesReadRecipeResponse,
  RecipesReadRecipesData,
  RecipesReadRecipesResponse,
  RecipesUpdateRecipeData,
  RecipesUpdateRecipeResponse,
  UserIngredientsCreateUserIngredientData,
  UserIngredientsCreateUserIngredientResponse,
  UserIngredientsDeleteUserIngredientData,
  UserIngredientsDeleteUserIngredientResponse,
  UserIngredientsReadUserIngredientData,
  UserIngredientsReadUserIngredientResponse,
  UserIngredientsReadUserIngredientsData,
  UserIngredientsReadUserIngredientsResponse,
  UserIngredientsUpdateUserIngredientData,
  UserIngredientsUpdateUserIngredientResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserMeResponse,
  UsersDeleteUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersReadUserMeResponse,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersUpdateUserData,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdateUserResponse,
  UtilsHealthCheckResponse,
  UtilsTestEmailData,
  UtilsTestEmailResponse,
} from "./types.gen"

export class IngredientsService {
  /**
   * Read Ingredients
   * Retrieve ingredients.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @param data.search
   * @returns IngredientsPublic Successful Response
   * @throws ApiError
   */
  public static readIngredients(
    data: IngredientsReadIngredientsData = {},
  ): CancelablePromise<IngredientsReadIngredientsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/ingredients/",
      query: {
        skip: data.skip,
        limit: data.limit,
        search: data.search,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Ingredient
   * Create new ingredient.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns IngredientPublic Successful Response
   * @throws ApiError
   */
  public static createIngredient(
    data: IngredientsCreateIngredientData,
  ): CancelablePromise<IngredientsCreateIngredientResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/ingredients/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Ingredient
   * Get ingredient by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns IngredientPublic Successful Response
   * @throws ApiError
   */
  public static readIngredient(
    data: IngredientsReadIngredientData,
  ): CancelablePromise<IngredientsReadIngredientResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/ingredients/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Ingredient
   * Update an ingredient.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns IngredientPublic Successful Response
   * @throws ApiError
   */
  public static updateIngredient(
    data: IngredientsUpdateIngredientData,
  ): CancelablePromise<IngredientsUpdateIngredientResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/ingredients/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Ingredient
   * Delete an ingredient.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteIngredient(
    data: IngredientsDeleteIngredientData,
  ): CancelablePromise<IngredientsDeleteIngredientResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/ingredients/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class ItemsService {
  /**
   * Read Items
   * Retrieve items.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns ItemsPublic Successful Response
   * @throws ApiError
   */
  public static readItems(
    data: ItemsReadItemsData = {},
  ): CancelablePromise<ItemsReadItemsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Item
   * Create new item.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static createItem(
    data: ItemsCreateItemData,
  ): CancelablePromise<ItemsCreateItemResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/items/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Item
   * Get item by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static readItem(
    data: ItemsReadItemData,
  ): CancelablePromise<ItemsReadItemResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Item
   * Update an item.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static updateItem(
    data: ItemsUpdateItemData,
  ): CancelablePromise<ItemsUpdateItemResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Item
   * Delete an item.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteItem(
    data: ItemsDeleteItemData,
  ): CancelablePromise<ItemsDeleteItemResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }

  /**
   * Recover Password
   * Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Recover Password Html Content
   * HTML Content for Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns string Successful Response
   * @throws ApiError
   */
  public static recoverPasswordHtmlContent(
    data: LoginRecoverPasswordHtmlContentData,
  ): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery-html-content/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class PrivateService {
  /**
   * Create User
   * Create a new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: PrivateCreateUserData,
  ): CancelablePromise<PrivateCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/private/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class RecipeIngredientsService {
  /**
   * Read Recipe Ingredients
   * Retrieve recipe ingredients for a specific recipe.
   * @param data The data for the request.
   * @param data.recipeId Recipe ID to get ingredients for
   * @param data.skip
   * @param data.limit
   * @returns RecipeIngredientsPublic Successful Response
   * @throws ApiError
   */
  public static readRecipeIngredients(
    data: RecipeIngredientsReadRecipeIngredientsData,
  ): CancelablePromise<RecipeIngredientsReadRecipeIngredientsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/recipe-ingredients/",
      query: {
        recipe_id: data.recipeId,
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Recipe Ingredient
   * Create new recipe ingredient.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns RecipeIngredientPublic Successful Response
   * @throws ApiError
   */
  public static createRecipeIngredient(
    data: RecipeIngredientsCreateRecipeIngredientData,
  ): CancelablePromise<RecipeIngredientsCreateRecipeIngredientResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/recipe-ingredients/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Recipe Ingredient
   * Get recipe ingredient by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns RecipeIngredientPublic Successful Response
   * @throws ApiError
   */
  public static readRecipeIngredient(
    data: RecipeIngredientsReadRecipeIngredientData,
  ): CancelablePromise<RecipeIngredientsReadRecipeIngredientResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/recipe-ingredients/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Recipe Ingredient
   * Update a recipe ingredient.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns RecipeIngredientPublic Successful Response
   * @throws ApiError
   */
  public static updateRecipeIngredient(
    data: RecipeIngredientsUpdateRecipeIngredientData,
  ): CancelablePromise<RecipeIngredientsUpdateRecipeIngredientResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/recipe-ingredients/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Recipe Ingredient
   * Delete a recipe ingredient.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteRecipeIngredient(
    data: RecipeIngredientsDeleteRecipeIngredientData,
  ): CancelablePromise<RecipeIngredientsDeleteRecipeIngredientResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/recipe-ingredients/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class RecipesService {
  /**
   * Read Recipes
   * Retrieve recipes for the current user.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @param data.search
   * @returns RecipesPublic Successful Response
   * @throws ApiError
   */
  public static readRecipes(
    data: RecipesReadRecipesData = {},
  ): CancelablePromise<RecipesReadRecipesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/recipes/",
      query: {
        skip: data.skip,
        limit: data.limit,
        search: data.search,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Recipe
   * Create new recipe.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns RecipePublic Successful Response
   * @throws ApiError
   */
  public static createRecipe(
    data: RecipesCreateRecipeData,
  ): CancelablePromise<RecipesCreateRecipeResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/recipes/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Recipe Suggestions
   * Get recipe suggestions based on available ingredients.
   * @param data The data for the request.
   * @param data.limit
   * @param data.minMatchScore
   * @returns RecipeSuggestionsPublic Successful Response
   * @throws ApiError
   */
  public static getRecipeSuggestions(
    data: RecipesGetRecipeSuggestionsData = {},
  ): CancelablePromise<RecipesGetRecipeSuggestionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/recipes/suggestions",
      query: {
        limit: data.limit,
        min_match_score: data.minMatchScore,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Recipe
   * Get recipe by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns RecipePublic Successful Response
   * @throws ApiError
   */
  public static readRecipe(
    data: RecipesReadRecipeData,
  ): CancelablePromise<RecipesReadRecipeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/recipes/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Recipe
   * Update a recipe.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns RecipePublic Successful Response
   * @throws ApiError
   */
  public static updateRecipe(
    data: RecipesUpdateRecipeData,
  ): CancelablePromise<RecipesUpdateRecipeResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/recipes/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Recipe
   * Delete a recipe.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteRecipe(
    data: RecipesDeleteRecipeData,
  ): CancelablePromise<RecipesDeleteRecipeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/recipes/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UserIngredientsService {
  /**
   * Read User Ingredients
   * Retrieve user ingredients.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @param data.expiringSoon
   * @param data.daysAhead
   * @returns UserIngredientsPublic Successful Response
   * @throws ApiError
   */
  public static readUserIngredients(
    data: UserIngredientsReadUserIngredientsData = {},
  ): CancelablePromise<UserIngredientsReadUserIngredientsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/user-ingredients/",
      query: {
        skip: data.skip,
        limit: data.limit,
        expiring_soon: data.expiringSoon,
        days_ahead: data.daysAhead,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User Ingredient
   * Create new user ingredient.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserIngredientPublic Successful Response
   * @throws ApiError
   */
  public static createUserIngredient(
    data: UserIngredientsCreateUserIngredientData,
  ): CancelablePromise<UserIngredientsCreateUserIngredientResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/user-ingredients/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User Ingredient
   * Get user ingredient by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns UserIngredientPublic Successful Response
   * @throws ApiError
   */
  public static readUserIngredient(
    data: UserIngredientsReadUserIngredientData,
  ): CancelablePromise<UserIngredientsReadUserIngredientResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/user-ingredients/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User Ingredient
   * Update a user ingredient.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns UserIngredientPublic Successful Response
   * @throws ApiError
   */
  public static updateUserIngredient(
    data: UserIngredientsUpdateUserIngredientData,
  ): CancelablePromise<UserIngredientsUpdateUserIngredientResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/user-ingredients/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User Ingredient
   * Delete a user ingredient.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserIngredient(
    data: UserIngredientsDeleteUserIngredientData,
  ): CancelablePromise<UserIngredientsDeleteUserIngredientResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/user-ingredients/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve users.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static readUsers(
    data: UsersReadUsersData = {},
  ): CancelablePromise<UsersReadUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User
   * Create new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: UsersCreateUserData,
  ): CancelablePromise<UsersCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User Me
   * Get current user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData,
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserById(
    data: UsersReadUserByIdData,
  ): CancelablePromise<UsersReadUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UsersUpdateUserData,
  ): CancelablePromise<UsersUpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: UsersDeleteUserData,
  ): CancelablePromise<UsersDeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Test Email
   * Test emails.
   * @param data The data for the request.
   * @param data.emailTo
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static testEmail(
    data: UtilsTestEmailData,
  ): CancelablePromise<UtilsTestEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/utils/test-email/",
      query: {
        email_to: data.emailTo,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check/",
    })
  }
}
